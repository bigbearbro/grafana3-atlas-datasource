{"version":3,"sources":["../../src/datasource.js"],"names":["AtlasDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","atlasFormat","minimumInterval","query","_this","urlPath","replaceWithText","datasourceRequest","method","headers","then","mapToTextValue","result","map","data","d","i","text","value","options","target","tag","queries","shouldUpdate","stepNumber","stepUnit","targets","forEach","hide","rawQuery","rawQueryInput","rawQueryParts","rawQueryReplaced","push","alias","legend","join","groupBys","filter","groupBy","length","queryParts","hasPushAggregation","tags","logicals","len","aTag","valueReplaced","includes","replace","multipleValues","split","mvIndex","mvLen","matcher","notCondition","logical","aggregation","concat","reverse","aliasLegend","legendSuffixValue","isNaN","alert","fullQuery","interval","interval_to_ms","secondsToHms","console","log","params","step","s","range","from","valueOf","e","to","format","httpOptions","inspect","deferred","defer","response","status","error","Error","reject","responseError","resolve","convertToTimeseries","message","promise","timeseriesData","index","series","datapoints","indexOf","allIsNull","values","notAllZero","notAllNull","timestamp","start","undefined","allIsZero","title"],"mappings":"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","file":"datasource.js","sourcesContent":["import angular from \"angular\";\nimport _ from \"lodash\";\nimport dateMath from \"app/core/utils/datemath\";\nimport kbn from \"app/core/utils/kbn\";\n\nexport class AtlasDatasource {\n\n    constructor(instanceSettings, $q, backendSrv, templateSrv) {\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.atlasFormat = instanceSettings.atlasFormat || 'std.json';\n        this.minimumInterval = instanceSettings.minimumInterval || 1000;\n    }\n\n    // Required for templating\n    metricFindQuery(query) {\n      var _this = this;\n      // default is to get tags from atlas\n      let urlPath = '/api/v1/tags/name';\n      // if we see a string as the query, this is a template query, otherwise it is a normal query\n      if (typeof(query) === \"string\") {\n        // TODO: support multiple tag queries\n        //\n        urlPath = '/api/v1/' + _this.templateSrv.replaceWithText(query);\n      }\n      // TODO: support multiple tags: Change this to a Promise.all\n      return this.backendSrv.datasourceRequest({\n        url: this.url + urlPath,\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      }).then(this.mapToTextValue);\n    }\n\n    mapToTextValue(result) {\n        return _.map(result.data, (d, i) => {\n            return {\n                text: d,\n                value: i\n            };\n        });\n    }\n\n    metricFindDimensions(options) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags?q=name,' + options.target + ',:eq',\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    dimensionFindValues(options, tag) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags/' + tag,\n            data: options,\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }).then(this.mapToTextValue);\n    }\n\n    query(options) {\n        var queries = [];\n        var shouldUpdate = false;\n        //only set the first time through\n        if (this.stepNumber == null){\n            this.stepNumber = 0;\n        }\n        if (this.stepUnit == null){\n            this.stepUnit = '';\n        }\n        var _this = this;\n        // var _scopeTags = _this.templateSrv.variables;\n        options.targets.forEach(function(target) {\n            if (target.hide || !(target.rawQuery || target.target)) {\n                return;\n            }\n            if (target.rawQueryInput) {\n                if (!target.rawQuery) {\n                    return;\n                }\n                var rawQueryParts = [];\n                // replace template variables inside the rawQuery\n                let rawQueryReplaced = _this.templateSrv.replaceWithText(target.rawQuery);\n                rawQueryParts.push(rawQueryReplaced);\n                if (target.alias) {\n                    var legend = target.alias;\n                    rawQueryParts.push(legend);\n                    rawQueryParts.push(':legend');\n                }\n                queries.push(rawQueryParts.join(','));\n            }\n            else {\n                if (!target.target) {\n                    return;\n                }\n                if (target.groupBys) {\n                    target.groupBys = target.groupBys.filter(function(groupBy) {\n                        return groupBy.name && groupBy.name.length > 0;\n                    });\n                }\n                var queryParts = [];\n                queryParts.push(\"name,\" + target.target + \",:eq\");\n\n                /*\n                  This is for multi-value selection from templateSrv, not supported right now...\n\n                if (_scopeTags) {\n                  for (var i = 0; i < _scopeTags.length; i++) {\n                    if (_scopeTags[i].current.text != 'All') {\n                      var x = _scopeTags[i];\n                      queryParts.push(_scopeTags[i].name + \",\" + _scopeTags[i].current.text + \",:eq,:and\");\n                    }\n                  }\n                }\n                */\n                var hasPushAggregation = false;\n\n                if (target.tags) {\n                    var logicals = [];\n                    for (let i = 0, len = target.tags.length; i < len; i++) {\n                      var aTag = target.tags[i];\n                      var valueReplaced = _this.templateSrv.replaceWithText(aTag.value);\n                      // the replaced value for templates will be a comma separated list\n                      if (valueReplaced.includes(',')) {\n                          len = valueReplaced.length;\n                          valueReplaced = valueReplaced.replace('{','');\n                          valueReplaced = valueReplaced.replace('}','');\n                          var multipleValues = valueReplaced.split(',');\n                          for (var mvIndex = 0, mvLen = multipleValues.length; mvIndex < mvLen; mvIndex++) {\n                            // queryParts.push(aTag.name);\n                            if (\"xxxin\" === aTag.matcher) {\n                              //if (target.aggregation) {\n                              //    queryParts.push(\":\" + target.aggregation);\n                              //}\n                              queryParts.push(aTag.name);\n                              queryParts.push(\"(\");\n                              queryParts.push(multipleValues[mvIndex]);\n                              queryParts.push(\")\");\n                              queryParts.push(\":in\");\n                            }\n                            else {\n                              queryParts.push(aTag.name);\n                              queryParts.push(multipleValues[mvIndex]);\n                              queryParts.push(\":\" + aTag.matcher);\n                            }\n                            if (\"not\" === aTag.notCondition) {\n                                queryParts.push(\":not\");\n                            }\n                            logicals.push(\":\" + aTag.logical);\n                          }\n                      } else {\n                        // queryParts.push(aTag.name);\n                        if (\"in\" === aTag.matcher) {\n                          // no logicals associated with this matcher\n\n                          // legend must come before this matcher\n                          // aggregation must come before this matcher, so the name must be pushed after\n                          if (target.aggregation) {\n                            hasPushAggregation = true;\n                            queryParts.push(\":\" + target.aggregation);\n                          }\n                          queryParts.push(aTag.name);\n                          queryParts.push(\"(\");\n                          queryParts.push(valueReplaced);\n                          queryParts.push(\")\");\n                          queryParts.push(\":in\");\n                        }\n                        else {\n                          queryParts.push(aTag.name);\n                          queryParts.push(valueReplaced);\n                          queryParts.push(\":\" + aTag.matcher);\n                        }\n                        if (\"not\" === aTag.notCondition) {\n                            queryParts.push(\":not\");\n                        }\n                        if (\"in\" === aTag.matcher) {\n                           // logicals go before \"in\"\n                        } else {\n                          logicals.push(\":\" + aTag.logical);\n                        }\n                      }\n                    }\n                    queryParts = queryParts.concat(logicals.reverse());\n                }\n\n                if (target.aggregation && !hasPushAggregation) {\n                  queryParts.push(\":\" + target.aggregation);\n                }\n                if (target.groupBys && target.groupBys.length > 0) {\n                    queryParts.push(\"(\");\n                    target.groupBys.forEach(function(groupBy) {\n                        queryParts.push(groupBy.name);\n                    });\n                    queryParts.push(\")\");\n                    queryParts.push(\":by\");\n                }\n\n                if (target.alias) {\n                    var aliasLegend = target.alias;\n                    if (target.groupBys && target.groupBys.length > 0) {\n                        var legendSuffixValue = _.map(target.groupBys,\n                                function(groupBy) {\n                                    return ' $' + groupBy.name;\n                                })\n                            .join(' ');\n                        aliasLegend += ' ' + legendSuffixValue;\n                    }\n                    queryParts.push(aliasLegend);\n                    queryParts.push(':legend');\n                }\n                queries.push(queryParts.join(','));\n            }\n            if (isNaN(target.stepNumber) && target.stepNumber != null){\n                alert(\"Only numbers are valid for the Step Size field\");\n            }\n            if (target.stepNumber != null && target.stepNumber != this.stepNumber){\n                this.stepNumber = target.stepNumber;\n                shouldUpdate = true;\n            }\n            if (target.stepUnit != null && target.stepUnit != this.stepUnit){\n                this.stepUnit = target.stepUnit;\n                shouldUpdate = true;\n            }\n            if (shouldUpdate){\n                if (this.stepUnit == null || this.stepUnit === ''){\n                    this.stepUnit = 'm';\n                }\n                options.targets.forEach(function(target) {\n                    target.stepNumber = this.stepNumber;\n                    target.stepUnit = this.stepUnit;\n                },this);\n            }\n\n        },this);\n        // Atlas can take multiple concatenated stack queries\n        var fullQuery = queries.join(',');\n        var interval = '1m';\n        if (this.stepNumber === 0){\n            interval = options.interval;\n        }\n        else{\n            //update all the other targets so that they are all the same\n            //console.log(\"step unit =\" + this.stepUnit);\n            interval = this.stepNumber+this.stepUnit;\n        }\n        //console.log(\"options interval = \" + interval );\n        if (kbn.interval_to_ms(interval) < this.minimumInterval) {\n            // console.log(\"Detected interval smaller than allowed: \" + interval);\n            interval = kbn.secondsToHms(this.minimumInterval / 1000);\n            // console.log(\"New Interval: \" + interval);\n        }\n        console.log(\"interval after min check = \" + interval );\n\n        /*\n                var params = {\n                    q: fullQuery,\n                    step: interval,\n                    s: options.rangeRaw.from,\n                    e: options.rangeRaw.to,\n                    format: this.atlasFormat\n                };\n        */\n\n        var params = {\n            q: fullQuery,\n            step: interval,\n            s: options.range.from.valueOf(),\n            e: options.range.to.valueOf(),\n            format: this.atlasFormat\n        };\n\n        var httpOptions = {\n            method: 'GET',\n            url: this.url + '/api/v1/graph',\n            params: params,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            inspect: {\n                type: 'atlas'\n            }\n        };\n        // console.log(\"before defer\");\n        var deferred = this.q.defer();\n        // var _this = this;\n        this.backendSrv.datasourceRequest(httpOptions)\n            .then(function(response) {\n                if (response.status !== 200) {\n                    console.log(\"error...\");\n                    var error = new Error(\"Bad Status: \" + response.status);\n                    deferred.reject(error);\n                }\n                if (!response.data) {\n                    var responseError = new Error(\"No data\");\n                    deferred.reject(responseError);\n                }\n                deferred.resolve(_this.convertToTimeseries(response.data));\n            }, function(response) {\n                console.error('Unable to load data. Response: %o', response.data ? response.data.message : response);\n                var error = new Error(\"Unable to load data\");\n                deferred.reject(error);\n            });\n\n        return deferred.promise;\n    }\n\n    convertToTimeseries(result) {\n        // console.log(\"inside convertToTimeseries\");\n        var timeseriesData = _.map(result.legend, function(legend, index) {\n            var series = {\n                target: legend,\n                datapoints: []\n            };\n            if (legend.indexOf('NO DATA') > 0 || legend.indexOf('NO_DATA') > 0) {\n                series.allIsNull = true;\n                return series;\n            }\n\n            var values = _.map(result.values, index);\n\n            var notAllZero = false;\n            var notAllNull = false;\n            for (var i = 0; i < values.length; i++) {\n                var value = values[i];\n                // convert any NaN to nulls so the graph panel will connect them\n                if (value === \"NaN\") {\n                    value = null;\n                }\n                var timestamp = result.start + (i * result.step);\n                series.datapoints.push([value, timestamp]);\n                notAllZero = notAllZero || value !== 0;\n                notAllNull = notAllNull || (value !== \"NaN\" && value !== undefined);\n            }\n            //hide zero and null results\n            series.allIsZero = !notAllZero;\n            series.allIsNull = !notAllNull;\n            return series;\n        });\n        return {\n            data: timeseriesData\n        };\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/v1/tags',\n            method: 'GET',\n        }).then(response => {\n            if (response.status === 200) {\n                return {\n                    status: \"success\",\n                    message: \"Data source is working\",\n                    title: \"Success\"\n                };\n            }\n        });\n    }\n}\n"]}